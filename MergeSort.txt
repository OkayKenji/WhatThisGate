function mergeSort(list):
    return mergeSortHelper(list, 0, size(list) - 1)

function mergeSortHelper(list, low, high):
    mergeSortCount = 0
    if low < high:
        mid = low + (high - low) / 2

        mergeSortCount += mergeSortHelper(list, low, mid)
        mergeSortCount += mergeSortHelper(list, mid + 1, high)

        mergeSortCount += merge(list, low, mid, high)

    return mergeSortCount

function merge(list, low, mid, high):
    mergeCount = 0
    leftList = sublist(list, low, mid)
    rightList = sublist(list, mid + 1, high)

    i = 0
    j = 0
    k = low
    leftSize = size(leftList)
    rightSize = size(rightList)

    while i < leftSize and j < rightSize:
        if leftList[i] <= rightList[j]:
            list[k] = leftList[i]
            i = i + 1
        else:
            list[k] = rightList[j]
            j = j + 1
        mergeCount = mergeCount + 1
        k = k + 1

    while i < leftSize:
        list[k] = leftList[i]
        mergeCount = mergeCount + 1
        i = i + 1
        k = k + 1

    while j < rightSize:
        list[k] = rightList[j]
        mergeCount = mergeCount + 1
        j = j + 1
        k = k + 1

    return mergeCount
